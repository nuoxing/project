<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                    "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
<!ENTITY FindBugs "<application>FindBugs</application>">
<!ENTITY Ant "<application>Ant</application>">
<!ENTITY Saxon "<application>Saxon</application>">
<!ENTITY FBHome "<replaceable>$FINDBUGS_HOME</replaceable>">
]>
 
<book lang="en" id="findbugs-manual">
 
<bookinfo>
<title>Using &FindBugs;</title>

<author>
  <firstname>David</firstname>
  <surname>Hovemeyer</surname>
</author>

<edition>0.7.1</edition>

<pubdate>February 11, 2004</pubdate>

</bookinfo>

<!--
   **************************************************************************
   Introduction
   **************************************************************************
-->
 
<chapter id="introduction">
<title>Introduction</title>

<para> &FindBugs; is a program to find bugs in Java programs.  It looks for instances
of "bug patterns" --- code instances that are likely to be errors.</para>

<para> This document describes version 0.7.1 of &FindBugs;. This is an
early release of the tool, so you may find problems with it. We
are very interested in getting your feedback on &FindBugs;. Please visit
the <ulink url="http://www.cs.umd.edu/~pugh/java/bugs">&FindBugs; web page</ulink> for
the latest information on &FindBugs;, contact information, and support resources such
as information about the &FindBugs; mailing lists.</para>

<sect1>
<title>Requirements</title>
<para> To use &FindBugs;, you need a runtime environment compatible with
<ulink url="http://java.sun.com/j2se">Java 2 Standard Edition</ulink>, version 1.4.0 or later.
&FindBugs; is platform independent, and is known to run on GNU/Linux, Windows, and
MacOS X platforms.</para>

<para>You should have at least 256 MB of memory to use &FindBugs;.
To analyze very large projects, more memory may be needed.</para>
</sect1>
 
</chapter>

<!--
   **************************************************************************
   Installing FindBugs
   **************************************************************************
-->

<chapter id="installing">
<title>Installing and Running &FindBugs;</title>

<para>
This chapter explains how to install and run &FindBugs;.
</para>

<sect1>
<title>Extracting the Distribution</title>

<para>
The easiest way to install &FindBugs; is to download a binary distribution.
Binary distributions are available in
<ulink url="http://www.cs.umd.edu/~pugh/java/bugs/release/findbugs-0.7.1.tar.gz">gzipped tar format</ulink> and
<ulink url="http://www.cs.umd.edu/~pugh/java/bugs/release/findbugs-0.7.1.zip">zip format</ulink>.
Once you have downloaded a binary distribution, extract it into a directory of your choice.
</para>

<para>
Extracting a gzipped tar format distribution:
<screen>
<prompt>$ </prompt><command>gunzip -c findbugs-0.7.1.tar.gz | tar xvf -</command>
</screen>
</para>

<para>
Extracting a zip format distribution:
<screen>
<prompt>C:\Software></prompt><command>unzip findbugs-0.7.1.zip</command>
</screen>
</para>

<para>
Usually, extracting a binary distribution will create a directory ending in
<filename class="directory">findbugs-0.7.1</filename>. For example, if you extracted
the binary distribution from the <filename class="directory">C:\Software</filename>
directory, then the &FindBugs; software will be extracted into the directory
<filename class="directory">C:\Software\findbugs-0.7.1</filename>.
This directory is the &FindBugs; home directory.  We'll refer to it as
&FBHome; throughout this manual.
</para>
</sect1>

<sect1>
<title>Configuration</title>

<para>
Once you have extracted the binary distribution, all you need to do in order
to run &FindBugs; is to invoke the wrapper script.
</para>

<para>
On Unix-like systems, use the following command to invoke the wrapper script:
<screen>
<prompt>$ </prompt><command>&FBHome;/bin/findbugs <replaceable>options...</replaceable></command>
</screen>
</para>

<para>
On Windows systems, the command to invoke the wrapper script is 
<screen>
<prompt>C:\My Directory></prompt><command>&FBHome;\bin\findbugs.bat <replaceable>options...</replaceable></command>
</screen>
</para>

<para>
On both Unix-like and Windows systems, you can simply add the <filename><replaceable>$FINDBUGS_HOME</replaceable>/bin</filename>
directory to your <filename>PATH</filename> environment variable and then invoke
FindBugs using the <command>findbugs</command> command.
</para>

</sect1>

<sect1 id="commandLineOptions">
<title>Command Line Options</title>

<para>

There are two ways to invoke &FindBugs;.  The first invokes the the Graphical User Interface (GUI):

<screen>
<prompt>$ </prompt><command>findbugs <replaceable>[standard options]</replaceable> <replaceable>[GUI options]</replaceable></command>
</screen>

The second invokes the Command Line Interface (Text UI):

<screen>
<prompt>$ </prompt><command>findbugs -textui <replaceable>[standard options]</replaceable> <replaceable>[Text UI options]</replaceable></command>
</screen>
</para>

<sect2>
<title>Standard options</title>

<para>
These options may be used with both the GUI and Text UI.

<variablelist>
  <varlistentry>
    <term><command>-jvmArgs <replaceable>args</replaceable></command></term>
    <listitem>
       <para>
         Specifies arguments to pass to the JVM.  For example, you might want
         to set a JVM property:
<screen>
<prompt>$ </prompt><command>findbugs -textui -jvmArgs "-Duser.language=ja" <replaceable>myApp.jar</replaceable></command>
</screen>
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><command>-javahome <replaceable>directory</replaceable></command></term>
    <listitem>
      <para>
        Specifies the directory containing the JRE (Java Runtime Environment) to
        use to execute &FindBugs;.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><command>-maxHeap <replaceable>size</replaceable></command></term>
    <listitem>
      <para>
      Specifies the maximum Java heap size in megabytes. The default is 256.
      More memory may be required to analyze very large programs or libraries.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><command>-debug</command></term>
    <listitem>
      <para>
      Prints a trace of detectors run and classes analyzed to standard output.
      Useful for troubleshooting unexpected analysis failures.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><command>-conserveSpace</command></term>
    <listitem>
      <para>
      This option disables analyses that increase precision but also
      increase memory consumption.  You may want to try this option if
      you find that &FindBugs; runs out of memory, or takes an unusually
      long time to complete its analysis.
      </para>
    </listitem>
  </varlistentry>


</variablelist>
</para>

</sect2>

<sect2>
<title>GUI Options</title>

<para>
These options are only accepted by the Graphical User Interface.

<variablelist>
  <varlistentry>
    <term><command>-plastic</command></term>
    <listitem>
       <para>
          Use the plastic look and feel from <ulink url="http://jgoodies.com/">jgoodies.com</ulink>.
          To use this option, put the file <filename>plastic.jar</filename>
          in the <filename class="directory">&FBHome;/lib</filename>
          directory.  (This option may only be used when running the Graphical User Interface.)
       </para>
    </listitem>
  </varlistentry>

</variablelist>
</para>
</sect2>

<sect2>
<title>Text UI Options</title>

<para>
These options are only accepted by the Text User Interface.

<variablelist>
  <varlistentry>
    <term><command>-sortByClass</command></term>
    <listitem>
       <para>
       Sort reported bug instances by class name.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><command >-include</command> <replaceable>filterFile.xml</replaceable></term>
    <listitem>
       <para>
       Only report bug instances that match the filter specified by <replaceable>filterFile.xml</replaceable>.
       See <xref linkend="filter" />.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><command >-exclude</command> <replaceable>filterFile.xml</replaceable></term>
    <listitem>
       <para>
       Report all bug instances except those matching the filter specified by <replaceable>filterFile.xml</replaceable>.
       See <xref linkend="filter" />.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
  <term><command>-low</command></term>
  <listitem>
    <para>
    Report all bugs.
    </para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><command>-medium</command></term>
  <listitem>
    <para>
    Report medium and high priority bugs.  This is the default setting.
    </para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><command>-high</command></term>
  <listitem>
    <para>
    Report only high priority bugs.
    </para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><command>-xml</command></term>
  <listitem>
    <para>
    Produce the bug reports as XML.  The XML data produced may be
    viewed in the GUI at a later time.
    </para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><command>-emacs</command></term>
  <listitem>
    <para>
    Produce the bug reports in Emacs format.
    </para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><command>-auxclasspath</command> <replaceable>classpath</replaceable></term>
  <listitem>
    <para>
    Set the auxiliary classpath for analysis.  This classpath should include all
    jar files and directories containing classes that are part of the program
    being analyzed but you do not want to have analyzed for bugs.
    </para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><command>-project</command> <replaceable>project</replaceable></term>
  <listitem>
    <para>
    Specify a project to be analyzed.  The project file you specify should
    be one that was created using the GUI interface.  It will typically end
    in the extension <filename>.fb</filename>.
    </para>
  </listitem>
  </varlistentry>

<!--
  <varlistentry>
  <term><command></command> <replaceable></replaceable></term>
  <listitem>
    <para>
    </para>
  </listitem>
  </varlistentry>
-->

</variablelist>
</para>

</sect2>

</sect1>

</chapter>

<!--
   **************************************************************************
   Compiling FindBugs from Source
   **************************************************************************
-->

<chapter id="building">
<title>Building &FindBugs; from Source</title>

<para>
This chapter describes how to build &FindBugs; from source code.  Unless you are
interesting in modifying &FindBugs;, you will probably want to skip to the
<link linkend="gui">next chapter</link>.
</para>

<sect1>
<title>Prerequisites</title>

<para>
To compile &FindBugs; from source, you will need the following:
<itemizedlist>
  <listitem>
    <para>
      The <ulink url="http://www.cs.umd.edu/~pugh/java/bugs/release/findbugs-0.7.1-source.tar.gz"
      >&FindBugs; source distribution</ulink>
    </para>
  </listitem>
  <listitem>
    <para>
      <ulink url="http://java.sun.com/j2se/">JDK 1.4.0 or later</ulink>
    </para>
  </listitem>
  <listitem>
    <para>
      The early-access version of the
     <ulink url="http://developer.java.sun.com/developer/earlyAccess/adding_generics/index.html"
     >generics-enabled javac
     </ulink>
     <note>
       <para>If you are using version 2.2 of the generics-enabled javac,
         you should rename the Jar file <filename>gcj-rt.jar</filename>
         to <filename>javac.jar</filename></para>
     </note>
    </para>
  </listitem>
  <listitem>
    <para>
      <ulink url="http://ant.apache.org/">Apache &Ant;</ulink>, version 1.5 or later
    </para>
  </listitem>
  <listitem>
    <para>
      The <ulink url="http://www.thecortex.net/clover/generics/jsr14adapter-1.1.jar"
     >JSR 14 adapter for &Ant;</ulink>.  Put the file <filename>jsr14adapter-1.1.jar</filename> in the
     <filename class="directory">lib</filename> subdirectory of your &Ant; installation.
    </para>
  </listitem>
</itemizedlist>
</para>

<para>
If you want to be able to generate formatted versions of the &FindBugs; documentation,
you will also need the following software:
<itemizedlist>
  <listitem>
    <para>
    The <ulink url="http://docbook.sourceforge.net/projects/xsl/index.html">DocBook XSL Stylesheets</ulink>.
    These are required to convert the &FindBugs; manual into HTML and PDF formats.
    </para>
  </listitem>
  <listitem>
    <para>
      The <ulink url="http://saxon.sourceforge.net/">&Saxon; XSLT Processor</ulink>.
      The file <filename>saxon.jar</filename> should be in your <envar>CLASSPATH</envar>.
    </para>
  </listitem>
<!--
  <listitem>
    <para>
    </para>
  </listitem>
-->
</itemizedlist>
</para>

</sect1>

<sect1>
<title>Extracting the Source Distribution</title>
<para>
After you download the source distribution, you'll need to extract it into
a working directory.  A typical command to do this is:

<screen>
<prompt>$ </prompt><command>gunzip -c findbugs-0.7.1-source.tar.gz | tar xvf -</command>
</screen>

</para>
</sect1>

<sect1>
<title>Modifying <filename>build.properties</filename></title>
<para>
You will need to modify the <filename>build.properties</filename> file
used by the <ulink url="http://ant.apache.org/">&Ant;</ulink>
<filename>build.xml</filename> file to build &FindBugs;.
The <filename>build.properties</filename> looks like this:
<programlisting>
<![CDATA[
# User Configuration:
# This section must be modified to reflect your system.

local.software.home     =/export/home/daveho/linux

# Set this to the location where you installed the generics-enabled
# version of javac.  Note: you need to install the JSR-14 Compiler Adapter,
# http://www.thecortex.net/clover/generics/jsr14adapter-1.1.jar,
# in the lib subdirectory of your Ant installation.
# If you are using version 2.2 of the generics-enabled javac,
#  then you will need to rename "gjc-rt.jar" to "javac.jar".

jsr14.home              =${local.software.home}/java/adding_generics-2_2-ea

# Set this to the directory containing the DocBook Modular XSL Stylesheets
#  from http://docbook.sourceforge.net/projects/xsl/

xsl.stylesheet.home     =${local.software.home}/docbook/docbook-xsl-1.61.0

# Set this to the directory where Saxon (http://saxon.sourceforge.net/)
# is installed. 

saxon.home              =${local.software.home}/java/saxon-6.5.2

# Set this to the directory where Eclipse (http://www.eclipse.org/)
# is installed.  This only required if you want to build the FindBugs
# Eclipse plugin.

eclipse.home		=${local.software.home}/java/eclipse-2.1.2
]]>
</programlisting>
</para>

<para>
The first property, <varname>jsr14.home</varname> specifies the directory containing your installation
of the generics-enabled version of javac.  You must update the value
of this property to match your system.
</para>

<para>
The second property, <varname>xsl.stylesheet.home</varname> specifies the full
path to the directory where you have installed the
<ulink url="http://docbook.sourceforge.net/projects/xsl/">DocBook Modular XSL
Stylesheets</ulink>.  You only need to specify this property if you will be
generating the &FindBugs; documentation.
</para>

<para>
The third property, <varname>saxon.home</varname>, is the full path to the
directory where you installed the <ulink url="http://saxon.sourceforge.net/">&Saxon; XSLT Processor</ulink>.
You only need to specify this property if you will be
generating the &FindBugs; documentation.
</para>

<para>
The fourth property, <varname>eclipse.home</varname>, is the full path
to an installation of <ulink url="http://www.eclipse.org/">Eclipse</ulink>.
You only need to specify this property if you want to rebuild the
FindBugs Eclipse plugin.
</para>

</sect1>

<sect1>
<title>Running &Ant;</title>

<para>
Once you have extracted the source distribution, modified <filename>build.xml</filename>
to reflect your system, and configured the tools (such as &Saxon; and the the JSR-14 adapter
for &Ant;), you are ready to build &FindBugs;.  Invoking &Ant; is a simple matter
of running the command
<screen>
<prompt>$ </prompt><command>ant <replaceable>target</replaceable></command>
</screen>
where <replaceable>target</replaceable> is one of the following:
<variablelist>
  <varlistentry>
    <term><command>build</command></term>
    <listitem>
       <para>
         This target compiles the code for &FindBugs;.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><command>buildAll</command></term>
    <listitem>
       <para>
       This target compiles the code and formats the documentation.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><command>release</command></term>
    <listitem>
       <para>
       This target generates a complete binary release of &FindBugs; into the
       <filename class="directory">build/release</filename> subdirectory.
       You will probably not need to use this target unless you want to
       distribute your own modified version of &FindBugs;.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><command>docs</command></term>
    <listitem>
       <para>
       This target just formats the documentation.  (It also compiles some of
       the source code as a side-effect.)
       </para>
    </listitem>
  </varlistentry>
</variablelist>
</para>

<para>
After running an &Ant; command, you should see output similar to
the following (after some other messages regarding the tasks that
&Ant; is running):
<screen>
<computeroutput>
BUILD SUCCESSFUL
Total time: 17 seconds
</computeroutput>
</screen>
</para>

</sect1>

<sect1>
<title>Running &FindBugs;</title>
<para>
The &Ant; build script for &FindBugs; is set up such that after 
building the <command>build</command> target, the working directory
is set up just like a binary distribution.  So, the information about
installing a binary distribution of &FindBugs; in <xref linkend="installing" />
apply to source distributions, too.
</para>
</sect1>

</chapter>


<!--
   **************************************************************************
   Using the FindBugs Graphical Interface
   **************************************************************************
-->

<chapter id="gui">
<title>Using the Findbugs Graphical User Interface</title>

<para>
&FindBugs; has two user interfaces: a graphical user interface (GUI) and a
command line user interface.  This chapter describes the graphical user interface.
</para>

<!--
<sect1>
<title>Executing the &FindBugs; GUI</title>
</sect1>
-->

<sect1>
<title>Creating a Project</title>
<para>
After you have started &FindBugs; using the <command>findbugs</command> command,
choose the <menuchoice><guimenu>File</guimenu><guimenuitem>New Project</guimenuitem></menuchoice>
menu item.  You will see a dialog which looks like this:
<mediaobject>
<imageobject>
<imagedata fileref="project-dialog.png" />
</imageobject>
</mediaobject>
</para>

<para>
Use the "Browse" button next to the "Add archive or directory" text field to select a Java archive
file (zip, jar, ear, or war file) or directory containing java classes to analyze for bugs.  You may add multiple
archives/directories.
</para>

<para>
You can also add the source directories which contain
the source code for the Java archives you are analyzing.  This will enable
&FindBugs; to highlight the source code which contains a possible error.
The source directories you add should be the roots of the Java
package hierarchy.  For example, if your application is contained in the
<varname>org.foobar.myapp</varname> package, you should add the
parent directory of the <filename class="directory">org</filename> directory
to the source directory list for the project.
</para>

<para>
Another optional step is to add additional Jar files or directories as
classpath entries.  You should do this if the archives and directories you are analyzing
have references to other classes which are not included in the analyzed
archives/directories and are not in the standard runtime classpath.  Some of the bug
pattern detectors in &FindBugs; make use of class hierarchy information,
so you will get more accurate results if the entire class hierarchy is
available which &FindBugs; performs its analysis.
</para>

</sect1>

<sect1>
<title>Running the Analysis</title>
<para>
Once you have added all of the archives, directories, and source directories,
click the "Find Bugs!" button to analyze the classes contained in the
Jar files.  Note that for a very large program on an older computer,
this may take quite a while (tens of minutes).  A recent computer with
ample memory will typically be able to analyze a large program in only a
few minutes.
</para>
</sect1>

<sect1>
<title>Browsing Results</title>

<para>
When the analysis completes, you will see a screen like the following:
<mediaobject>
  <imageobject>
    <imagedata fileref="example-details.png" />
  </imageobject>
</mediaobject>
</para>

<para>
The top pane of the window shows the bug tree; this is a hierarchical
representation of all of the potential bugs detected in the analyzed
Jar files.  The tabs allow you to browse by class, package, or bug type.
</para>

<para>
When you select a particular bug instance in the top pane, you will
see a description of the bug in the "Details" tab of the bottom pane.
In addition, the "Source code" tab of the bottom pane will, for some
kinds of bugs, show the program source code where the potential bug occurs.
In the above example, the bug is an access to an uninitialized field in
a constructor.  The source code window highlights the line containing
the problematic access.
</para>

<para>
You may add a textual annotations to bug instances.  To do so, choose the
"Annotations" tab in the bottom pane.  Simply type in any information which
you would like to record.  When you load and save bug results files,
the annotations are preserved.
</para>

<para>
You may use the <menuchoice><guimenu>File</guimenu><guimenuitem>Save project</guimenuitem></menuchoice>
menu option to save the current lists
of Jar files and source directories.  A saved project may be loaded with
the <menuchoice><guimenu>File</guimenu><guimenuitem>Open project</guimenuitem></menuchoice> menu option.
Note that when you save a project, the analysis results are
not saved.
</para>

</sect1>

<sect1>
<title>Loading and saving results</title>

<para>
You may use the <menuchoice><guimenu>File</guimenu><guimenuitem>Load bugs</guimenuitem></menuchoice>
and <menuchoice><guimenu>File</guimenu><guimenuitem>Save bugs</guimenuitem></menuchoice> to load
and save the bug results produced by running &FindBugs; on your project.  The results are
saved in XML format.  Any annotations you have added to bug reports are saved in the
resulting XML file.
</para>

<note>
<title>Planned Features</title>
<para>
Support for loading and saving bugs is still under development.
You may find bugs in this feature, and the file format and/or implementation
may change in future releases.
</para>
</note>

</sect1>

</chapter>



<!--
   **************************************************************************
   Using the FindBugs Command Line Interface
   **************************************************************************
-->

<chapter id="textui">
<title>Using the &FindBugs; Command Line Interface</title>

<para>
The &FindBugs; Command Line Interface (or Text UI) can be used to
analyze an application for bugs non-interactively.  Each bug instance will be
reported on a single line.  All output is written to the standard output file descriptor.
<xref linkend="filter" /> explains how bug reports may be filtered in order
to get only the output you're interested in.
</para>

<para>
See <xref linkend="commandLineOptions" /> in <xref linkend="installing" /> for a description of how to invoke the
Command Line Interface.
</para>

<note>
<title>Planned Features</title>
<para>
  In future releases of &FindBugs;, we plan to support generating reports in formats
  such as HTML and XML, as well as providing more flexibility over which
  bug detectors are run, how results can be sorted and filtered, etc.
</para>
</note>

</chapter>


<!--
   **************************************************************************
   Using the FindBugs Ant task
   **************************************************************************
-->

<chapter id="anttask">
<title>Using the &FindBugs; &Ant; task</title>

<para>
This chapter describes how to integrate &FindBugs; into a build script
for <ulink url="http://ant.apache.org/">&Ant;</ulink>, which is a popular Java build
and deployment tool.  Using the &FindBugs; &Ant; task, your build script can
automatically run &FindBugs; on your Java code.
</para>

<para>
The &Ant; task was generously contributed by Mike Fagan.
</para>

<sect1>
<title>Installing the &Ant; task</title>

<para>
To install the &Ant; task, simply copy <filename>&FBHome;/lib/findbugs-ant.jar</filename>
into the <filename>lib</filename> subdirectory of your &Ant; installation.

<note>
<para>It is strongly recommended that you use the &Ant; task with the version
of &FindBugs; it was included with.  We do not guarantee that the &Ant; task Jar file
will work with any version of &FindBugs; other than the one it was included with.</para>
</note>
</para>

</sect1>

<sect1>
<title>Modifying build.xml</title>

<para>
To incorporate &FindBugs; into <filename>build.xml</filename> (the build script
for &Ant;), you first need to add a task definition.  This should appear as follows:

<screen>
  &lt;taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/&gt;
</screen>

The task definition specifies that when a <literal>findbugs</literal> element is
seen in <filename>build.xml</filename>, it should use the indicated class to execute the task.
</para>

<para>
After you have added the task definition, you can define a target
which uses the <literal>findbugs</literal> task.  Here is an example
which could be added to the <filename>build.xml</filename> for the
Apache <ulink url="http://jakarta.apache.org/bcel/">BCEL</ulink> library.

<screen>
  &lt;property name="findbugs.home" value="/export/home/daveho/work/findbugs" /&gt;

  &lt;target name="findbugs" depends="jar"&gt;
    &lt;findbugs home="${findbugs.home}"
              output="xml"
              outputFile="bcel-fb.xml" &gt;
      &lt;auxClasspath path="${basedir}/lib/Regex.jar" /&gt;
      &lt;sourcePath path="${basedir}/src/java" /&gt;
      &lt;class location="${basedir}/bin/bcel.jar" /&gt;
    &lt;/findbugs&gt;
  &lt;/target&gt;
</screen>

The <literal>findbugs</literal> element must have the <literal>home</literal>
attribute set to the directory in which &FindBugs; is installed; in other words,
&FBHome;.  See <xref linkend="installing" />.
</para>

<para>
This target will execute &FindBugs; on <filename>bcel.jar</filename>, which is the
Jar file produced by BCEL's build script.  (By making it depend on the "jar"
target, we ensure that the library is fully compiled before running &FindBugs; on it.)
The output of &FindBugs; will be saved in XML format to a file called
<filename>bcel-fb.xml</filename>.
An auxiliary Jar file, <filename>Regex.jar</filename>, is added to the aux classpath,
because it is referenced by the main BCEL library.  A source path is specified
so that the saved bug data will have accurate references to the BCEL source code.
</para>
</sect1>

<sect1>
<title>Executing the task</title>

<para>
Here is an example of invoking &Ant; from the command line, using the <literal>findbugs</literal>
target defined above.

<screen>
  <prompt>[daveho@noir]$</prompt> <command>ant findbugs</command>
  Buildfile: build.xml
  
  init:
  
  compile:
  
  examples:
  
  jar:
  
  findbugs:
   [findbugs] Running FindBugs...
   [findbugs] Bugs were found
   [findbugs] Output saved to bcel-fb.xml
  
  BUILD SUCCESSFUL
  Total time: 35 seconds
</screen>

In this case, because we saved the bug results in an XML file, we can
use the &FindBugs; GUI to view the results; see <xref linkend="gui"/>.
</para>

</sect1>

<sect1>
<title>Parameters</title>

<para>This section describes the parameters that may be specified when
using the &FindBugs; task.

<variablelist>

  <varlistentry>
    <term><literal>class</literal></term>
    <listitem>
       <para>
       A nested element specifying which classes to analyze.  The <literal>class</literal>
       element must specify a <literal>location</literal> attribute which names the
       archive file (jar, zip, etc.), directory, or class file to be analyzed.  Multiple <literal>class</literal>
       elements may be specified as children of a single <literal>findbugs</literal> element.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>auxClasspath</literal></term>
    <listitem>
       <para>
       An optional nested element which specifies a classpath (Jar files or directories)
       containing classes used by the analyzed library or application, but which
       you don't want to analyze.  It is specified the same way as
       &Ant;'s <literal>classpath</literal> element for the Java task.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>sourcePath</literal></term>
    <listitem>
       <para>
       An optional nested element which specifies a source directory path
       containing source files used to compile the Java code being analyzed.
       By specifying a source path, any generated XML bug output will have
       complete source information, which allows later viewing in the
       GUI.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>home</literal></term>
    <listitem>
       <para>
       A required attribute.
       It must be set to the name of the directory where &FindBugs; is installed.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>quietErrors</literal></term>
    <listitem>
       <para>
       An optional boolean attribute.
       If true, reports of serious analysis errors and missing classes will
       be supressed in the &FindBugs; output.  Default is false.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>reportLevel</literal></term>
    <listitem>
       <para>
       An optional attribute.  It specifies
       the priority threshold for reporting bugs.  If set to "low", all bugs are reported.
       If set to "medium" (the default), medium and high priority bugs are reported.
       If set to "high", only high priority bugs are reported.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>output</literal></term>
    <listitem>
       <para>
       Optional attribute.
       It specifies the output format.  If set to "xml" (the default), output
       is in XML format.  If set to "text", output is in ad-hoc text format.
       If set to "emacs", output is in <ulink url="http://www.gnu.org/software/emacs/">Emacs</ulink> error message format.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>sort</literal></term>
    <listitem>
       <para>
       Optional attribute.  If the <literal>output</literal> attribute
       is set to "text", then the <literal>sort</literal> attribute specifies
       whether or not reported bugs are sorted by class.  Default is true.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>outputFile</literal></term>
    <listitem>
       <para>
       Optional attribute.  If specified, names the output file in which the
       &FindBugs; output will be saved.  By default, the output is displayed
       directly by &Ant;.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>debug</literal></term>
    <listitem>
       <para>
      Optional boolean attribute.  If set to true, &FindBugs; prints diagnostic
      information about which classes are being analyzed, and which bug pattern
      detectors are being run.  Default is false.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>conserveSpace</literal></term>
    <listitem>
       <para>
      Optional boolean attribute.  If set to true, &FindBugs;
      will disable analyses that improve precision but consume extra memory.
      Default is false.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>visitors</literal></term>
    <listitem>
       <para>
       Optional attribute.  It specifies a comma-separated list of bug detectors
       which should be run.  The bug detectors are specified by their class names,
       without any package qualification.  By default, all detectors which are
       not disabled by default are run.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>omitVisitors</literal></term>
    <listitem>
       <para>
       Optional attribute.  It is like the <literal>visitors</literal> attribute,
       except it specifies detectors which will <emphasis>not</emphasis> be run.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>excludeFilter</literal></term>
    <listitem>
       <para>
       Optional attribute.  It specifies the filename of a filter specifying bugs
       to exclude from being reported.  See <xref linkend="filter" />.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>includeFilter</literal></term>
    <listitem>
       <para>
       Optional attribute.  It specifies the filename of a filter specifying
       which bugs are reported.  See <xref linkend="filter" />.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>projectFile</literal></term>
    <listitem>
       <para>
       Optional attribute.  It specifies the name of a project file.
       Project files are created by the &FindBugs; GUI, and specify classes,
       aux classpath entries, and source directories.  By naming a project,
       you don't need to specify any <literal>class</literal> elements,
       nor do you need to specify <literal>auxClasspath</literal> or
       <literal>sourcePath</literal> attributes.
       See <xref linkend="gui"/> for how to create a project.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>jvmargs</literal></term>
    <listitem>
       <para>
       Optional attribute.  It specifies any arguments that should be passed
       to the Java virtual machine used to run &FindBugs;.  You may need to
       use this attribute to specify flags to increase the amount of memory
       the JVM may use if you are analyzing a very large program.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>timeout</literal></term>
    <listitem>
       <para>
       Optional attribute.  It specifies the amount of time, in milliseconds,
       that the Java process executing &FindBugs; may run before it is
       assumed to be hung and is terminated.  The default is 600,000
       milliseconds, which is ten minutes.  Note that for very large
       programs, &FindBugs; may require more than ten minutes to complete its 
       analysis.
       </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><literal>failOnError</literal></term>
    <listitem>
       <para>
       Optional attribute.  Whether to abort the build process if there is an 
       error running &FindBugs;. Defaults to "false"
       </para>
    </listitem>
  </varlistentry>

</variablelist>


</para>

<!--

-->

</sect1>

</chapter>

<!--
   **************************************************************************
   Using the FindBugs Eclipse plugin
   **************************************************************************
-->

<chapter id="eclipse">
<title>Using the &FindBugs; Eclipse plugin</title>

<para>
The FindBugs Eclipse plugin allows &FindBugs; to be used within
the <ulink url="http://www.eclipse.org/">Eclipse</ulink> IDE.
The FindBugs Eclipse plugin was generously contributed by Peter Friese,
and has a <ulink url="http://www.tobject.de/development/findbugs.html">home page</ulink>.
</para>

<sect1>
<title>Installation</title>

<para>
Two files are required to use the plugin, each of which can be downloaded
from the &FindBugs; home page.  The first file is the
<ulink url="http://www.cs.umd.edu/~pugh/java/bugs/release/edu.umd.cs.findbugs_0.7.1.zip">Core plugin</ulink>,
which contains the core &FindBugs; engine.  The second file is the
<ulink url="http://www.cs.umd.edu/~pugh/java/bugs/release/de.tobject.findbugs_0.0.3.zip">UI plugin</ulink>,
which interfaces &FindBugs; to the Eclipse workbench.  Each of these files should be extracted
inside the <filename>plugins</filename> directory of your Eclipse installation.
</para>

<para>
Once the plugin files are extracted, start Eclipse and choose
<menuchoice>
  <guimenu>Help</guimenu>
  <guimenuitem>About Eclipse Platform</guimenuitem>
  <guimenuitem>Plug-in Details</guimenuitem>
</menuchoice>.
You should "FindBugs Plug-in" and "FindBugs Binaries" plugins listed.
</para>
</sect1>

<sect1>
<title>Using the Plugin</title>

<para>
In the properties dialog for a Java project, select "Findbugs".
Check the box labeled "Enable FindBugs".  Then, in the right
click menu for the project, select the option labeled
"Find Bugs".  &FindBugs; will run, and problem markers will point to
locations in your code which have been identified as instances
of bug patterns.
</para>

</sect1>


</chapter>


<!--
   **************************************************************************
   Filter files
   **************************************************************************
-->

<chapter id="filter">
<title>Filter Files</title>

<para>
Filter files may be used to include or exclude bug reports for particular classes
and methods.  This chapter explains how to use filter files.

<note>
<title>Planned Features</title>
<para>
  Filters are currently only supported by the Command Line interface.
  Eventually, filter support will be added to the GUI.
</para>
</note>
</para>


<sect1>
<title>Introduction to Filter Files</title>

<para>
Conceptually, a filter matches bug instances against a set of criteria.
By defining a filter, you can select bug instances for special treatment;
for example, to exclude or include them in a report.
</para>

<para>
A filter file is an <ulink url="http://www.w3.org/XML/">XML</ulink> document with a top-level <literal>FindBugsFilter</literal> element
which has some number of <literal>Match</literal> elements as children.  Each <literal>Match</literal>
element represents a predicate which is applied to generated bug instances.
Usually, a filter will be used to exclude bug instances.  For example:

<screen>
<prompt>$ </prompt><command>findbugs -textui -exclude <replaceable>myExcludeFilter.xml</replaceable> <replaceable>myApp.jar</replaceable></command>
</screen>

However, a filter could also be used to select bug instances to specifically
report:

<screen>
<prompt>$ </prompt><command>findbugs -textui -include <replaceable>myIncludeFilter.xml</replaceable> <replaceable>myApp.jar</replaceable></command>
</screen>
</para>

<para>
<literal>Match</literal> elements have <literal>class</literal> and <literal>classregex</literal>
attributes specifying what class or classes the predicate applies to.
The <literal>class</literal> attribute specifies the name of a class.
The <literal>classregex</literal> attribute specifies a regular expression
applied to class names of bug instances.  The regular expression is
used to create a <literal>java.util.regex.Pattern</literal> object,
which does the matching.
<literal>Match</literal> elements contain children, which are conjuncts of the predicate.
In other words, each of the children must be true for the predicate to be true.
</para>

</sect1>

<sect1>
<title>Types of Match clauses</title>

<variablelist>
 <varlistentry>
   <term><literal>&lt;BugCode&gt;</literal></term>
   <listitem><para>
    This element specifies abbreviations of bugs.
   The <literal>name</literal> attribute is a comma-seperated list of abbreviations.
   </para></listitem>
 </varlistentry>

 <varlistentry>
   <term><literal>&lt;Method&gt;</literal></term>

   <listitem><para>This element specifies a method.  The <literal>name</literal> attribute is the name
   of the method.  The <literal>params</literal> attribute is a comma separated list
   of the types of the method's parameters.  The <literal>returns</literal> attribute is
   the method's return type.  In <literal>params</literal> and <literal>returns</literal>, class names
   must be fully qualified.  (E.g., "java.lang.String" instead of just
   "String".)  Note that <literal>params</literal> and <literal>returns</literal> are optional; you can
   just specify <literal>name</literal>, and the clause will match all methods with
   that name.  However, if you specify either <literal>params</literal> or <literal>returns</literal>,
   you must specify both of them.
   </para></listitem>
 </varlistentry>

 <varlistentry>
   <term><literal>&lt;Or&gt;</literal></term>
    <listitem><para>
   This element combines <literal>Match</literal> clauses as disjuncts.  I.e., you can put two
   <literal>Method</literal> elements in an <literal>Or</literal> clause in order match either method.
   </para></listitem>
 </varlistentry>
</variablelist>

</sect1>

<sect1>
<title>Caveats</title>

<para>
<literal>Match</literal> clauses can only match information that is actually contained in the
bug instances.  Every bug instance has a class, so in general, excluding
bugs by class will work.
</para>

<para>
Some bug instances have two classes.  For example, the DE (dropped exception)
bugs report both the class containing the method where the dropped exception
happens, and the class which represents the type of the dropped exception.
Only the <emphasis>first</emphasis> (primary) class is matched against <literal>Match</literal> clauses.
So, for example, if you want to suppress IC (initialization circularity)
reports for classes "com.foobar.A" and "com.foobar.B", you would use
two <literal>Match</literal> clauses:

<programlisting>
   &lt;Match class="com.foobar.A"&gt;
      &lt;BugCode name="IC" /&gt;
   &lt;/Match&gt;

   &lt;Match class="com.foobar.B"&gt;
      &lt;BugCode name="IC" /&gt;
   &lt;/Match&gt;
</programlisting>

By explicitly matching both classes, you ensure that the IC bug instance will be
matched regardless of which class involved in the circularity happens to be
listed first in the bug instance.  (Of course, this approach might accidentally
supress circularities involving "com.foobar.A" or "com.foobar.B" and a third
class.)
</para>

<para>
Many kinds of bugs report what method they occur in.  For those bug instances,
you can put <literal>Method</literal> clauses in the <literal>Match</literal> element and they should work
as expected.
</para>

</sect1>

<sect1>
<title>Examples</title>

<para>
  1. Match all bug reports for a class.

<programlisting>
     &lt;Match class="com.foobar.MyClass" /&gt;
</programlisting>

</para>

<para>
  2. Match certain tests from a class.
<programlisting>
     &lt;Match class="com.foobar.MyClass"&gt;
       &lt;BugCode name="DE,UrF,SIC" /&gt;
     &lt;/Match&gt;
</programlisting>
</para>

<para>
  3. Match certain tests from all classes.

<programlisting>
     &lt;Match classregex=".*" &gt;
       &lt;BugCode name="DE,UrF,SIC" /&gt;
     &lt;/Match&gt;
</programlisting>
</para>

<para>
  4. Match bug types from specified methods of a class.

<programlisting>
     &lt;Match class="com.foobar.MyClass"&gt;
       &lt;Or&gt;
         &lt;Method name="frob" params="int,java.lang.String" returns="void" /&gt;
         &lt;Method name="blat" params="" returns="boolean" /&gt;
       &lt;/Or&gt;
       &lt;BugCode name="DC" /&gt;
     &lt;/Match&gt;
</programlisting>
</para>

</sect1>

<sect1>
<title>Complete Example</title>

<programlisting>

&lt;FindBugsFilter&gt;
     &lt;Match class="com.foobar.ClassNotToBeAnalyzed" /&gt;

     &lt;Match class="com.foobar.ClassWithSomeBugsMatched"&gt;
       &lt;BugCode name="DE,UrF,SIC" /&gt;
     &lt;/Match&gt;

     &lt;!-- Match all XYZ violations. --&gt;
     &lt;Match classregex=".*" &gt;
       &lt;BugCode name="XYZ" /&gt;
     &lt;/Match&gt;

     &lt;!-- Match all doublecheck violations in these methods of "AnotherClass". --&gt;
     &lt;Match class="com.foobar.AnotherClass"&gt;
       &lt;Or&gt;
         &lt;Method name="nonOverloadedMethod" /&gt;
         &lt;Method name="frob" params="int,java.lang.String" returns="void" /&gt;
         &lt;Method name="blat" params="" returns="boolean" /&gt;
       &lt;/Or&gt;
       &lt;BugCode name="DC" /&gt;
     &lt;/Match&gt;
&lt;/FindBugsFilter&gt;
</programlisting>

</sect1>


</chapter>


<!--
   **************************************************************************
   License
   **************************************************************************
-->

<chapter id="license">
<title>License</title>

<para>
FindBugs is free software distributed under the terms of the
<ulink url="http://www.gnu.org/licenses/lgpl.html">Lesser GNU Public License</ulink>.
You should have received a copy of the license in the file <filename>LICENSE.txt</filename>
in the &FindBugs; distribution.
</para>

<para>
You can find the latest version of FindBugs, along with its source code, from the
<ulink url="http://www.cs.umd.edu/~pugh/java/bugs">FindBugs web page</ulink>.
</para>

</chapter>


<!--
   **************************************************************************
   Acknowledgments
   **************************************************************************
-->
<chapter id="acknowledgments">
<title>Acknowledgments</title>

<sect1>
<title>Contributors</title>

<para>&FindBugs; was originally written by Bill Pugh (<email>pugh@cs.umd.edu</email>).
David Hovemeyer (<email>daveho@cs.umd.edu</email>) implemented some of the
detectors, added the Swing GUI, and is the current maintainer.</para>

<para>Mike Fagan (<email>mfagan@tde.com</email>) contributed the &Ant; build script,
the &Ant; task, and several enhancements and bug fixes to the GUI.</para>

<para>Germano Leichsenring contributed Japanese translations of the bug
summaries.</para>

<para>David Li contributed the Emacs bug report format.</para>

<para>Peter D. Stout contributed recursive detection of Class-Path
attributes in analyzed Jar files, and other fixes.</para>

<para>Peter Friese wrote the FindBugs Eclipse plugin.</para>

<para>If you have contributed to &FindBugs;, but aren't mentioned above,
please send email to <email>daveho@cs.umd.edu</email> (and also accept
our humble apologies).</para>

</sect1>

<sect1>
<title>Software Used</title>

<para>&FindBugs; uses several open-source software packages, without which its
development would have been much more difficult.</para>

<sect2>
<title>BCEL</title>
<para>&FindBugs; includes includes software developed by the Apache Software Foundation
(<ulink url="http://www.apache.org/">http://www.apache.org/</ulink>).
Specifically, it uses the <ulink url="http://jakarta.apache.org/bcel/">Byte Code
Engineering Library</ulink>.</para>
</sect2>

<sect2>
<title>DOM4J</title>
<para>&FindBugs; uses <ulink url="http://dom4j.org">DOM4J</ulink>, which is
distributed under the following license:</para>

<blockquote>
<para>
Copyright 2001 (C) MetaStuff, Ltd. All Rights Reserved. 
</para>

<para>
Redistribution and use of this software and associated documentation
("Software"), with or without modification, are permitted provided that
the following conditions are met:
</para>

<orderedlist numeration="arabic">
   <listitem><para>
   Redistributions of source code must retain copyright statements and
   notices. Redistributions must also contain a copy of this document.
  </para></listitem>
   <listitem><para>
   Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
  </para></listitem>
   <listitem><para>
   The name "DOM4J" must not be used to endorse or promote products
   derived from this Software without prior written permission
   of MetaStuff, Ltd. For written permission, please contact
   <email>dom4j-info@metastuff.com</email>.
  </para></listitem>
   <listitem><para>
   Products derived from this Software may not be called "DOM4J" nor may
   "DOM4J" appear in their names without prior written permission of
   MetaStuff, Ltd. DOM4J is a registered trademark of MetaStuff, Ltd.
  </para></listitem>
   <listitem><para>
   Due credit should be given to the DOM4J Project (<ulink url="http://dom4j.org/">http://dom4j.org/</ulink>).
  </para></listitem>
</orderedlist>

<para>
THIS SOFTWARE IS PROVIDED BY METASTUFF, LTD. AND CONTRIBUTORS ``AS IS''
AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL METASTUFF, LTD. OR ITS
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
</para>
</blockquote>

</sect2>

</sect1>

</chapter>


</book>
